
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010b0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001258  08001258  00011258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012a0  080012a0  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080012a0  080012a0  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012a0  080012a0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012a0  080012a0  000112a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012a4  080012a4  000112a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080012a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000001c0  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000de5  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000583  00000000  00000000  00020eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001f8  00000000  00000000  00021440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000163  00000000  00000000  00021638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000031ea  00000000  00000000  0002179b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000193c  00000000  00000000  00024985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000adb5  00000000  00000000  000262c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000cf8  00000000  00000000  00031078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00031d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000060 	.word	0x20000060
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001240 	.word	0x08001240

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000064 	.word	0x20000064
 80001e4:	08001240 	.word	0x08001240

080001e8 <delay>:
#include "led.h"



void delay(uint32_t count)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
  for(uint32_t i = 0 ; i < count ; i++);
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	e002      	b.n	80001fc <delay+0x14>
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	3301      	adds	r3, #1
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	68fa      	ldr	r2, [r7, #12]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	429a      	cmp	r2, r3
 8000202:	d3f8      	bcc.n	80001f6 <delay+0xe>
}
 8000204:	bf00      	nop
 8000206:	bf00      	nop
 8000208:	3714      	adds	r7, #20
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
	...

08000214 <led_init_all>:

void led_init_all(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 800021a:	4b19      	ldr	r3, [pc, #100]	; (8000280 <led_init_all+0x6c>)
 800021c:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 800021e:	4b19      	ldr	r3, [pc, #100]	; (8000284 <led_init_all+0x70>)
 8000220:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f043 0208 	orr.w	r2, r3, #8
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 800025e:	200c      	movs	r0, #12
 8000260:	f000 f82a 	bl	80002b8 <led_off>
    led_off(LED_ORANGE);
 8000264:	200d      	movs	r0, #13
 8000266:	f000 f827 	bl	80002b8 <led_off>
    led_off(LED_RED);
 800026a:	200e      	movs	r0, #14
 800026c:	f000 f824 	bl	80002b8 <led_off>
    led_off(LED_BLUE);
 8000270:	200f      	movs	r0, #15
 8000272:	f000 f821 	bl	80002b8 <led_off>



}
 8000276:	bf00      	nop
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40023830 	.word	0x40023830
 8000284:	40020c00 	.word	0x40020c00

08000288 <led_on>:

void led_on(uint8_t led_no)
{
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000292:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <led_on+0x2c>)
 8000294:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	79fa      	ldrb	r2, [r7, #7]
 800029c:	2101      	movs	r1, #1
 800029e:	fa01 f202 	lsl.w	r2, r1, r2
 80002a2:	431a      	orrs	r2, r3
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	601a      	str	r2, [r3, #0]

}
 80002a8:	bf00      	nop
 80002aa:	3714      	adds	r7, #20
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	40020c14 	.word	0x40020c14

080002b8 <led_off>:

void led_off(uint8_t led_no)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b085      	sub	sp, #20
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 80002c2:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <led_off+0x30>)
 80002c4:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	79fa      	ldrb	r2, [r7, #7]
 80002cc:	2101      	movs	r1, #1
 80002ce:	fa01 f202 	lsl.w	r2, r1, r2
 80002d2:	43d2      	mvns	r2, r2
 80002d4:	401a      	ands	r2, r3
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	601a      	str	r2, [r3, #0]

}
 80002da:	bf00      	nop
 80002dc:	3714      	adds	r7, #20
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40020c14 	.word	0x40020c14

080002ec <main>:

/* Each task has its own TCB */
TCB_t user_tasks[MAX_TASKS];

int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0

	enable_processor_faults();
 80002f0:	f000 f928 	bl	8000544 <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 80002f4:	4807      	ldr	r0, [pc, #28]	; (8000314 <main+0x28>)
 80002f6:	f000 f891 	bl	800041c <init_scheduler_stack>

	init_tasks_stack();
 80002fa:	f000 f895 	bl	8000428 <init_tasks_stack>

	led_init_all();
 80002fe:	f7ff ff89 	bl	8000214 <led_init_all>

	init_systick_timer(TICK_HZ);
 8000302:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000306:	f000 f853 	bl	80003b0 <init_systick_timer>

	switch_sp_to_psp();
 800030a:	f000 f9a7 	bl	800065c <switch_sp_to_psp>

	task1_handler();
 800030e:	f000 f807 	bl	8000320 <task1_handler>

	for(;;);
 8000312:	e7fe      	b.n	8000312 <main+0x26>
 8000314:	2001ec00 	.word	0x2001ec00

08000318 <idle_task>:
}


void idle_task(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
	while(1);
 800031c:	e7fe      	b.n	800031c <idle_task+0x4>
	...

08000320 <task1_handler>:
}


void task1_handler(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_GREEN);
 8000324:	200c      	movs	r0, #12
 8000326:	f7ff ffaf 	bl	8000288 <led_on>
		delay(DELAY_COUNT_1S);
 800032a:	4805      	ldr	r0, [pc, #20]	; (8000340 <task1_handler+0x20>)
 800032c:	f7ff ff5c 	bl	80001e8 <delay>
		led_off(LED_GREEN);
 8000330:	200c      	movs	r0, #12
 8000332:	f7ff ffc1 	bl	80002b8 <led_off>
		delay(DELAY_COUNT_1S);
 8000336:	4802      	ldr	r0, [pc, #8]	; (8000340 <task1_handler+0x20>)
 8000338:	f7ff ff56 	bl	80001e8 <delay>
		led_on(LED_GREEN);
 800033c:	e7f2      	b.n	8000324 <task1_handler+0x4>
 800033e:	bf00      	nop
 8000340:	001312d0 	.word	0x001312d0

08000344 <task2_handler>:
	}

}

void task2_handler(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_ORANGE);
 8000348:	200d      	movs	r0, #13
 800034a:	f7ff ff9d 	bl	8000288 <led_on>
		delay(DELAY_COUNT_500MS);
 800034e:	4805      	ldr	r0, [pc, #20]	; (8000364 <task2_handler+0x20>)
 8000350:	f7ff ff4a 	bl	80001e8 <delay>
		led_off(LED_ORANGE);
 8000354:	200d      	movs	r0, #13
 8000356:	f7ff ffaf 	bl	80002b8 <led_off>
		delay(DELAY_COUNT_500MS);
 800035a:	4802      	ldr	r0, [pc, #8]	; (8000364 <task2_handler+0x20>)
 800035c:	f7ff ff44 	bl	80001e8 <delay>
		led_on(LED_ORANGE);
 8000360:	e7f2      	b.n	8000348 <task2_handler+0x4>
 8000362:	bf00      	nop
 8000364:	00098968 	.word	0x00098968

08000368 <task3_handler>:
	}

}

void task3_handler(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_BLUE);
 800036c:	200f      	movs	r0, #15
 800036e:	f7ff ff8b 	bl	8000288 <led_on>
		delay(DELAY_COUNT_250MS);
 8000372:	4805      	ldr	r0, [pc, #20]	; (8000388 <task3_handler+0x20>)
 8000374:	f7ff ff38 	bl	80001e8 <delay>
		led_off(LED_BLUE);
 8000378:	200f      	movs	r0, #15
 800037a:	f7ff ff9d 	bl	80002b8 <led_off>
		delay(DELAY_COUNT_250MS);
 800037e:	4802      	ldr	r0, [pc, #8]	; (8000388 <task3_handler+0x20>)
 8000380:	f7ff ff32 	bl	80001e8 <delay>
		led_on(LED_BLUE);
 8000384:	e7f2      	b.n	800036c <task3_handler+0x4>
 8000386:	bf00      	nop
 8000388:	0004c4b4 	.word	0x0004c4b4

0800038c <task4_handler>:

}

void task4_handler(void)

{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_RED);
 8000390:	200e      	movs	r0, #14
 8000392:	f7ff ff79 	bl	8000288 <led_on>
		delay(DELAY_COUNT_125MS);
 8000396:	4805      	ldr	r0, [pc, #20]	; (80003ac <task4_handler+0x20>)
 8000398:	f7ff ff26 	bl	80001e8 <delay>
		led_off(LED_RED);
 800039c:	200e      	movs	r0, #14
 800039e:	f7ff ff8b 	bl	80002b8 <led_off>
		delay(DELAY_COUNT_125MS);
 80003a2:	4802      	ldr	r0, [pc, #8]	; (80003ac <task4_handler+0x20>)
 80003a4:	f7ff ff20 	bl	80001e8 <delay>
		led_on(LED_RED);
 80003a8:	e7f2      	b.n	8000390 <task4_handler+0x4>
 80003aa:	bf00      	nop
 80003ac:	0002625a 	.word	0x0002625a

080003b0 <init_systick_timer>:

}


void init_systick_timer(uint32_t tick_hz)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b087      	sub	sp, #28
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80003b8:	4b15      	ldr	r3, [pc, #84]	; (8000410 <init_systick_timer+0x60>)
 80003ba:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80003bc:	4b15      	ldr	r3, [pc, #84]	; (8000414 <init_systick_timer+0x64>)
 80003be:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 80003c0:	4a15      	ldr	r2, [pc, #84]	; (8000418 <init_systick_timer+0x68>)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80003c8:	3b01      	subs	r3, #1
 80003ca:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 80003cc:	697b      	ldr	r3, [r7, #20]
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 80003d2:	697b      	ldr	r3, [r7, #20]
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	431a      	orrs	r2, r3
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 80003de:	693b      	ldr	r3, [r7, #16]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f043 0202 	orr.w	r2, r3, #2
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 80003ea:	693b      	ldr	r3, [r7, #16]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f043 0204 	orr.w	r2, r3, #4
 80003f2:	693b      	ldr	r3, [r7, #16]
 80003f4:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f043 0201 	orr.w	r2, r3, #1
 80003fe:	693b      	ldr	r3, [r7, #16]
 8000400:	601a      	str	r2, [r3, #0]

}
 8000402:	bf00      	nop
 8000404:	371c      	adds	r7, #28
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	e000e014 	.word	0xe000e014
 8000414:	e000e010 	.word	0xe000e010
 8000418:	00f42400 	.word	0x00f42400

0800041c <init_scheduler_stack>:


__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 800041c:	4603      	mov	r3, r0
     __asm volatile("MSR MSP,%0": :  "r" (sched_top_of_stack)  :   );
 800041e:	f383 8808 	msr	MSP, r3
     __asm volatile("BX LR");
 8000422:	4770      	bx	lr

}
 8000424:	bf00      	nop
	...

08000428 <init_tasks_stack>:


/* this function stores dummy stack contents for each task */

void init_tasks_stack(void)
{
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0

	user_tasks[0].current_state = TASK_READY_STATE;
 800042e:	4b3a      	ldr	r3, [pc, #232]	; (8000518 <init_tasks_stack+0xf0>)
 8000430:	2200      	movs	r2, #0
 8000432:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 8000434:	4b38      	ldr	r3, [pc, #224]	; (8000518 <init_tasks_stack+0xf0>)
 8000436:	2200      	movs	r2, #0
 8000438:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 800043a:	4b37      	ldr	r3, [pc, #220]	; (8000518 <init_tasks_stack+0xf0>)
 800043c:	2200      	movs	r2, #0
 800043e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 8000442:	4b35      	ldr	r3, [pc, #212]	; (8000518 <init_tasks_stack+0xf0>)
 8000444:	2200      	movs	r2, #0
 8000446:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	user_tasks[4].current_state = TASK_READY_STATE;
 800044a:	4b33      	ldr	r3, [pc, #204]	; (8000518 <init_tasks_stack+0xf0>)
 800044c:	2200      	movs	r2, #0
 800044e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	user_tasks[0].psp_value = IDLE_STACK_START;
 8000452:	4b31      	ldr	r3, [pc, #196]	; (8000518 <init_tasks_stack+0xf0>)
 8000454:	4a31      	ldr	r2, [pc, #196]	; (800051c <init_tasks_stack+0xf4>)
 8000456:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 8000458:	4b2f      	ldr	r3, [pc, #188]	; (8000518 <init_tasks_stack+0xf0>)
 800045a:	4a31      	ldr	r2, [pc, #196]	; (8000520 <init_tasks_stack+0xf8>)
 800045c:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 800045e:	4b2e      	ldr	r3, [pc, #184]	; (8000518 <init_tasks_stack+0xf0>)
 8000460:	4a30      	ldr	r2, [pc, #192]	; (8000524 <init_tasks_stack+0xfc>)
 8000462:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 8000464:	4b2c      	ldr	r3, [pc, #176]	; (8000518 <init_tasks_stack+0xf0>)
 8000466:	4a30      	ldr	r2, [pc, #192]	; (8000528 <init_tasks_stack+0x100>)
 8000468:	631a      	str	r2, [r3, #48]	; 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 800046a:	4b2b      	ldr	r3, [pc, #172]	; (8000518 <init_tasks_stack+0xf0>)
 800046c:	4a2f      	ldr	r2, [pc, #188]	; (800052c <init_tasks_stack+0x104>)
 800046e:	641a      	str	r2, [r3, #64]	; 0x40

	user_tasks[0].task_handler = idle_task;
 8000470:	4b29      	ldr	r3, [pc, #164]	; (8000518 <init_tasks_stack+0xf0>)
 8000472:	4a2f      	ldr	r2, [pc, #188]	; (8000530 <init_tasks_stack+0x108>)
 8000474:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 8000476:	4b28      	ldr	r3, [pc, #160]	; (8000518 <init_tasks_stack+0xf0>)
 8000478:	4a2e      	ldr	r2, [pc, #184]	; (8000534 <init_tasks_stack+0x10c>)
 800047a:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 800047c:	4b26      	ldr	r3, [pc, #152]	; (8000518 <init_tasks_stack+0xf0>)
 800047e:	4a2e      	ldr	r2, [pc, #184]	; (8000538 <init_tasks_stack+0x110>)
 8000480:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task3_handler;
 8000482:	4b25      	ldr	r3, [pc, #148]	; (8000518 <init_tasks_stack+0xf0>)
 8000484:	4a2d      	ldr	r2, [pc, #180]	; (800053c <init_tasks_stack+0x114>)
 8000486:	63da      	str	r2, [r3, #60]	; 0x3c
	user_tasks[4].task_handler = task4_handler;
 8000488:	4b23      	ldr	r3, [pc, #140]	; (8000518 <init_tasks_stack+0xf0>)
 800048a:	4a2d      	ldr	r2, [pc, #180]	; (8000540 <init_tasks_stack+0x118>)
 800048c:	64da      	str	r2, [r3, #76]	; 0x4c


	uint32_t *pPSP;

	for(int i = 0 ; i < MAX_TASKS ;i++)
 800048e:	2300      	movs	r3, #0
 8000490:	60bb      	str	r3, [r7, #8]
 8000492:	e037      	b.n	8000504 <init_tasks_stack+0xdc>
	{
		pPSP = (uint32_t*) user_tasks[i].psp_value;
 8000494:	4a20      	ldr	r2, [pc, #128]	; (8000518 <init_tasks_stack+0xf0>)
 8000496:	68bb      	ldr	r3, [r7, #8]
 8000498:	011b      	lsls	r3, r3, #4
 800049a:	4413      	add	r3, r2
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	60fb      	str	r3, [r7, #12]

		pPSP--;
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	3b04      	subs	r3, #4
 80004a4:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;//0x01000000
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80004ac:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	3b04      	subs	r3, #4
 80004b2:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t) user_tasks[i].task_handler;
 80004b4:	4a18      	ldr	r2, [pc, #96]	; (8000518 <init_tasks_stack+0xf0>)
 80004b6:	68bb      	ldr	r3, [r7, #8]
 80004b8:	011b      	lsls	r3, r3, #4
 80004ba:	4413      	add	r3, r2
 80004bc:	330c      	adds	r3, #12
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	461a      	mov	r2, r3
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	3b04      	subs	r3, #4
 80004ca:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	f06f 0202 	mvn.w	r2, #2
 80004d2:	601a      	str	r2, [r3, #0]

		for(int j = 0 ; j < 13 ; j++)
 80004d4:	2300      	movs	r3, #0
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	e008      	b.n	80004ec <init_tasks_stack+0xc4>
		{
			pPSP--;
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	3b04      	subs	r3, #4
 80004de:	60fb      	str	r3, [r7, #12]
		    *pPSP = 0;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
		for(int j = 0 ; j < 13 ; j++)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	3301      	adds	r3, #1
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2b0c      	cmp	r3, #12
 80004f0:	ddf3      	ble.n	80004da <init_tasks_stack+0xb2>

		}

		user_tasks[i].psp_value = (uint32_t)pPSP;
 80004f2:	68fa      	ldr	r2, [r7, #12]
 80004f4:	4908      	ldr	r1, [pc, #32]	; (8000518 <init_tasks_stack+0xf0>)
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	011b      	lsls	r3, r3, #4
 80004fa:	440b      	add	r3, r1
 80004fc:	601a      	str	r2, [r3, #0]
	for(int i = 0 ; i < MAX_TASKS ;i++)
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	3301      	adds	r3, #1
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	2b04      	cmp	r3, #4
 8000508:	ddc4      	ble.n	8000494 <init_tasks_stack+0x6c>


	}

}
 800050a:	bf00      	nop
 800050c:	bf00      	nop
 800050e:	3714      	adds	r7, #20
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	20000080 	.word	0x20000080
 800051c:	2001f000 	.word	0x2001f000
 8000520:	20020000 	.word	0x20020000
 8000524:	2001fc00 	.word	0x2001fc00
 8000528:	2001f800 	.word	0x2001f800
 800052c:	2001f400 	.word	0x2001f400
 8000530:	08000319 	.word	0x08000319
 8000534:	08000321 	.word	0x08000321
 8000538:	08000345 	.word	0x08000345
 800053c:	08000369 	.word	0x08000369
 8000540:	0800038d 	.word	0x0800038d

08000544 <enable_processor_faults>:

void enable_processor_faults(void)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 800054a:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <enable_processor_faults+0x3c>)
 800054c:	607b      	str	r3, [r7, #4]

	*pSHCSR |= ( 1 << 16); //mem manage
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 17); //bus fault
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 18); //usage fault
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	601a      	str	r2, [r3, #0]
}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	e000ed24 	.word	0xe000ed24

08000584 <get_psp_value>:


uint32_t get_psp_value(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0

	return user_tasks[current_task].psp_value;
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <get_psp_value+0x1c>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	4a05      	ldr	r2, [pc, #20]	; (80005a4 <get_psp_value+0x20>)
 800058e:	011b      	lsls	r3, r3, #4
 8000590:	4413      	add	r3, r2
 8000592:	681b      	ldr	r3, [r3, #0]
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000000 	.word	0x20000000
 80005a4:	20000080 	.word	0x20000080

080005a8 <save_psp_value>:


void save_psp_value(uint32_t current_psp_value)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <save_psp_value+0x24>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <save_psp_value+0x28>)
 80005b6:	011b      	lsls	r3, r3, #4
 80005b8:	4413      	add	r3, r2
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	601a      	str	r2, [r3, #0]
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000000 	.word	0x20000000
 80005d0:	20000080 	.word	0x20000080

080005d4 <update_next_task>:


void update_next_task(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED_STATE;
 80005da:	23ff      	movs	r3, #255	; 0xff
 80005dc:	607b      	str	r3, [r7, #4]

	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 80005de:	2300      	movs	r3, #0
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	e024      	b.n	800062e <update_next_task+0x5a>
	{
		current_task++;
 80005e4:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <update_next_task+0x7c>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	3301      	adds	r3, #1
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	4b18      	ldr	r3, [pc, #96]	; (8000650 <update_next_task+0x7c>)
 80005ee:	701a      	strb	r2, [r3, #0]
	    current_task %= MAX_TASKS;
 80005f0:	4b17      	ldr	r3, [pc, #92]	; (8000650 <update_next_task+0x7c>)
 80005f2:	781a      	ldrb	r2, [r3, #0]
 80005f4:	4b17      	ldr	r3, [pc, #92]	; (8000654 <update_next_task+0x80>)
 80005f6:	fba3 1302 	umull	r1, r3, r3, r2
 80005fa:	0899      	lsrs	r1, r3, #2
 80005fc:	460b      	mov	r3, r1
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	440b      	add	r3, r1
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <update_next_task+0x7c>)
 8000608:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <update_next_task+0x7c>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	4a12      	ldr	r2, [pc, #72]	; (8000658 <update_next_task+0x84>)
 8000610:	011b      	lsls	r3, r3, #4
 8000612:	4413      	add	r3, r2
 8000614:	3308      	adds	r3, #8
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	607b      	str	r3, [r7, #4]
		if( (state == TASK_READY_STATE) && (current_task != 0) )
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d103      	bne.n	8000628 <update_next_task+0x54>
 8000620:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <update_next_task+0x7c>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d106      	bne.n	8000636 <update_next_task+0x62>
	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	3301      	adds	r3, #1
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	2b04      	cmp	r3, #4
 8000632:	ddd7      	ble.n	80005e4 <update_next_task+0x10>
 8000634:	e000      	b.n	8000638 <update_next_task+0x64>
			break;
 8000636:	bf00      	nop
	}

	if(state != TASK_READY_STATE)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d002      	beq.n	8000644 <update_next_task+0x70>
		current_task = 0;
 800063e:	4b04      	ldr	r3, [pc, #16]	; (8000650 <update_next_task+0x7c>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	20000000 	.word	0x20000000
 8000654:	cccccccd 	.word	0xcccccccd
 8000658:	20000080 	.word	0x20000080

0800065c <switch_sp_to_psp>:
__attribute__((naked)) void switch_sp_to_psp(void)
{
    //1. initialize the PSP with TASK1 stack start address

	//get the value of psp of current_task
	__asm volatile ("PUSH {LR}"); //preserve LR which connects back to main()
 800065c:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 800065e:	f7ff ff91 	bl	8000584 <get_psp_value>
	__asm volatile ("MSR PSP,R0"); //initialize psp
 8000662:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");  //pops back LR value
 8000666:	f85d eb04 	ldr.w	lr, [sp], #4

	//2. change SP to PSP using CONTROL register
	__asm volatile ("MOV R0,#0X02");
 800066a:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 800066e:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 8000672:	4770      	bx	lr
}
 8000674:	bf00      	nop

08000676 <PendSV_Handler>:
{

	/*Save the context of current task */

	//1. Get current running task's PSP value
	__asm volatile("MRS R0,PSP");
 8000676:	f3ef 8009 	mrs	r0, PSP
	//2. Using that PSP value store SF2( R4 to R11)
	__asm volatile("STMDB R0!,{R4-R11}");
 800067a:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("PUSH {LR}");
 800067e:	b500      	push	{lr}

	//3. Save the current value of PSP
    __asm volatile("BL save_psp_value");
 8000680:	f7ff ff92 	bl	80005a8 <save_psp_value>


	/*Retrieve the context of next task */

	//1. Decide next task to run
    __asm volatile("BL update_next_task");
 8000684:	f7ff ffa6 	bl	80005d4 <update_next_task>

	//2. get its past PSP value
	__asm volatile ("BL get_psp_value");
 8000688:	f7ff ff7c 	bl	8000584 <get_psp_value>

	//3. Using that PSP value retrieve SF2(R4 to R11)
	__asm volatile ("LDMIA R0!,{R4-R11}");
 800068c:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//4. update PSP and exit
	__asm volatile("MSR PSP,R0");
 8000690:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 8000694:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR");
 8000698:	4770      	bx	lr



}
 800069a:	bf00      	nop

0800069c <update_global_tick_count>:


void update_global_tick_count(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
	g_tick_count++;
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <update_global_tick_count+0x18>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	4a03      	ldr	r2, [pc, #12]	; (80006b4 <update_global_tick_count+0x18>)
 80006a8:	6013      	str	r3, [r2, #0]
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	2000007c 	.word	0x2000007c

080006b8 <unblock_tasks>:

void unblock_tasks(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
	for(int i = 1 ; i < MAX_TASKS ; i++)
 80006be:	2301      	movs	r3, #1
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	e01b      	b.n	80006fc <unblock_tasks+0x44>
	{
		if(user_tasks[i].current_state != TASK_READY_STATE)
 80006c4:	4a12      	ldr	r2, [pc, #72]	; (8000710 <unblock_tasks+0x58>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	011b      	lsls	r3, r3, #4
 80006ca:	4413      	add	r3, r2
 80006cc:	3308      	adds	r3, #8
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d010      	beq.n	80006f6 <unblock_tasks+0x3e>
		{
			if(user_tasks[i].block_count == g_tick_count)
 80006d4:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <unblock_tasks+0x58>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	011b      	lsls	r3, r3, #4
 80006da:	4413      	add	r3, r2
 80006dc:	3304      	adds	r3, #4
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <unblock_tasks+0x5c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d106      	bne.n	80006f6 <unblock_tasks+0x3e>
			{
				user_tasks[i].current_state = TASK_READY_STATE;
 80006e8:	4a09      	ldr	r2, [pc, #36]	; (8000710 <unblock_tasks+0x58>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	011b      	lsls	r3, r3, #4
 80006ee:	4413      	add	r3, r2
 80006f0:	3308      	adds	r3, #8
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
	for(int i = 1 ; i < MAX_TASKS ; i++)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3301      	adds	r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2b04      	cmp	r3, #4
 8000700:	dde0      	ble.n	80006c4 <unblock_tasks+0xc>
			}
		}

	}

}
 8000702:	bf00      	nop
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	20000080 	.word	0x20000080
 8000714:	2000007c 	.word	0x2000007c

08000718 <SysTick_Handler>:


void  SysTick_Handler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <SysTick_Handler+0x28>)
 8000720:	607b      	str	r3, [r7, #4]

    update_global_tick_count();
 8000722:	f7ff ffbb 	bl	800069c <update_global_tick_count>

    unblock_tasks();
 8000726:	f7ff ffc7 	bl	80006b8 <unblock_tasks>

    //pend the pendsv exception
    *pICSR |= ( 1 << 28);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	601a      	str	r2, [r3, #0]
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	e000ed04 	.word	0xe000ed04

08000744 <HardFault_Handler>:

//2. implement the fault handlers
void HardFault_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 8000748:	4801      	ldr	r0, [pc, #4]	; (8000750 <HardFault_Handler+0xc>)
 800074a:	f000 f9e5 	bl	8000b18 <puts>
	while(1);
 800074e:	e7fe      	b.n	800074e <HardFault_Handler+0xa>
 8000750:	08001258 	.word	0x08001258

08000754 <MemManage_Handler>:
}


void MemManage_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 8000758:	4801      	ldr	r0, [pc, #4]	; (8000760 <MemManage_Handler+0xc>)
 800075a:	f000 f9dd 	bl	8000b18 <puts>
	while(1);
 800075e:	e7fe      	b.n	800075e <MemManage_Handler+0xa>
 8000760:	08001270 	.word	0x08001270

08000764 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 8000768:	4801      	ldr	r0, [pc, #4]	; (8000770 <BusFault_Handler+0xc>)
 800076a:	f000 f9d5 	bl	8000b18 <puts>
	while(1);
 800076e:	e7fe      	b.n	800076e <BusFault_Handler+0xa>
 8000770:	08001288 	.word	0x08001288

08000774 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	e00a      	b.n	800079c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000786:	f3af 8000 	nop.w
 800078a:	4601      	mov	r1, r0
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	60ba      	str	r2, [r7, #8]
 8000792:	b2ca      	uxtb	r2, r1
 8000794:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	3301      	adds	r3, #1
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697a      	ldr	r2, [r7, #20]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	dbf0      	blt.n	8000786 <_read+0x12>
  }

  return len;
 80007a4:	687b      	ldr	r3, [r7, #4]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3718      	adds	r7, #24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b086      	sub	sp, #24
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	60f8      	str	r0, [r7, #12]
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	e009      	b.n	80007d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	1c5a      	adds	r2, r3, #1
 80007c4:	60ba      	str	r2, [r7, #8]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	3301      	adds	r3, #1
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697a      	ldr	r2, [r7, #20]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	429a      	cmp	r2, r3
 80007da:	dbf1      	blt.n	80007c0 <_write+0x12>
  }
  return len;
 80007dc:	687b      	ldr	r3, [r7, #4]
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <_close>:

int _close(int file)
{
 80007e6:	b480      	push	{r7}
 80007e8:	b083      	sub	sp, #12
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007fe:	b480      	push	{r7}
 8000800:	b083      	sub	sp, #12
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
 8000806:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800080e:	605a      	str	r2, [r3, #4]
  return 0;
 8000810:	2300      	movs	r3, #0
}
 8000812:	4618      	mov	r0, r3
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <_isatty>:

int _isatty(int file)
{
 800081e:	b480      	push	{r7}
 8000820:	b083      	sub	sp, #12
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000826:	2301      	movs	r3, #1
}
 8000828:	4618      	mov	r0, r3
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000840:	2300      	movs	r3, #0
}
 8000842:	4618      	mov	r0, r3
 8000844:	3714      	adds	r7, #20
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
	...

08000850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000858:	4a14      	ldr	r2, [pc, #80]	; (80008ac <_sbrk+0x5c>)
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <_sbrk+0x60>)
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000864:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <_sbrk+0x64>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d102      	bne.n	8000872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <_sbrk+0x64>)
 800086e:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <_sbrk+0x68>)
 8000870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <_sbrk+0x64>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4413      	add	r3, r2
 800087a:	693a      	ldr	r2, [r7, #16]
 800087c:	429a      	cmp	r2, r3
 800087e:	d207      	bcs.n	8000890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000880:	f000 fa78 	bl	8000d74 <__errno>
 8000884:	4603      	mov	r3, r0
 8000886:	220c      	movs	r2, #12
 8000888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800088a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800088e:	e009      	b.n	80008a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <_sbrk+0x64>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000896:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <_sbrk+0x64>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4413      	add	r3, r2
 800089e:	4a05      	ldr	r2, [pc, #20]	; (80008b4 <_sbrk+0x64>)
 80008a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008a2:	68fb      	ldr	r3, [r7, #12]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3718      	adds	r7, #24
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20020000 	.word	0x20020000
 80008b0:	00000400 	.word	0x00000400
 80008b4:	200000d0 	.word	0x200000d0
 80008b8:	20000220 	.word	0x20000220

080008bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008bc:	480d      	ldr	r0, [pc, #52]	; (80008f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c4:	480c      	ldr	r0, [pc, #48]	; (80008f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008c6:	490d      	ldr	r1, [pc, #52]	; (80008fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80008c8:	4a0d      	ldr	r2, [pc, #52]	; (8000900 <LoopForever+0xe>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008cc:	e002      	b.n	80008d4 <LoopCopyDataInit>

080008ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d2:	3304      	adds	r3, #4

080008d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d8:	d3f9      	bcc.n	80008ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008da:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008dc:	4c0a      	ldr	r4, [pc, #40]	; (8000908 <LoopForever+0x16>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e0:	e001      	b.n	80008e6 <LoopFillZerobss>

080008e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e4:	3204      	adds	r2, #4

080008e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e8:	d3fb      	bcc.n	80008e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ea:	f000 fa49 	bl	8000d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ee:	f7ff fcfd 	bl	80002ec <main>

080008f2 <LoopForever>:

LoopForever:
  b LoopForever
 80008f2:	e7fe      	b.n	80008f2 <LoopForever>
  ldr   r0, =_estack
 80008f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008fc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000900:	080012a8 	.word	0x080012a8
  ldr r2, =_sbss
 8000904:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000908:	20000220 	.word	0x20000220

0800090c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800090c:	e7fe      	b.n	800090c <ADC_IRQHandler>
	...

08000910 <std>:
 8000910:	2300      	movs	r3, #0
 8000912:	b510      	push	{r4, lr}
 8000914:	4604      	mov	r4, r0
 8000916:	e9c0 3300 	strd	r3, r3, [r0]
 800091a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800091e:	6083      	str	r3, [r0, #8]
 8000920:	8181      	strh	r1, [r0, #12]
 8000922:	6643      	str	r3, [r0, #100]	; 0x64
 8000924:	81c2      	strh	r2, [r0, #14]
 8000926:	6183      	str	r3, [r0, #24]
 8000928:	4619      	mov	r1, r3
 800092a:	2208      	movs	r2, #8
 800092c:	305c      	adds	r0, #92	; 0x5c
 800092e:	f000 f9d3 	bl	8000cd8 <memset>
 8000932:	4b05      	ldr	r3, [pc, #20]	; (8000948 <std+0x38>)
 8000934:	6263      	str	r3, [r4, #36]	; 0x24
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <std+0x3c>)
 8000938:	62a3      	str	r3, [r4, #40]	; 0x28
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <std+0x40>)
 800093c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800093e:	4b05      	ldr	r3, [pc, #20]	; (8000954 <std+0x44>)
 8000940:	6224      	str	r4, [r4, #32]
 8000942:	6323      	str	r3, [r4, #48]	; 0x30
 8000944:	bd10      	pop	{r4, pc}
 8000946:	bf00      	nop
 8000948:	08000b29 	.word	0x08000b29
 800094c:	08000b4b 	.word	0x08000b4b
 8000950:	08000b83 	.word	0x08000b83
 8000954:	08000ba7 	.word	0x08000ba7

08000958 <stdio_exit_handler>:
 8000958:	4a02      	ldr	r2, [pc, #8]	; (8000964 <stdio_exit_handler+0xc>)
 800095a:	4903      	ldr	r1, [pc, #12]	; (8000968 <stdio_exit_handler+0x10>)
 800095c:	4803      	ldr	r0, [pc, #12]	; (800096c <stdio_exit_handler+0x14>)
 800095e:	f000 b869 	b.w	8000a34 <_fwalk_sglue>
 8000962:	bf00      	nop
 8000964:	20000004 	.word	0x20000004
 8000968:	080010c9 	.word	0x080010c9
 800096c:	20000010 	.word	0x20000010

08000970 <cleanup_stdio>:
 8000970:	6841      	ldr	r1, [r0, #4]
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <cleanup_stdio+0x34>)
 8000974:	4299      	cmp	r1, r3
 8000976:	b510      	push	{r4, lr}
 8000978:	4604      	mov	r4, r0
 800097a:	d001      	beq.n	8000980 <cleanup_stdio+0x10>
 800097c:	f000 fba4 	bl	80010c8 <_fflush_r>
 8000980:	68a1      	ldr	r1, [r4, #8]
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <cleanup_stdio+0x38>)
 8000984:	4299      	cmp	r1, r3
 8000986:	d002      	beq.n	800098e <cleanup_stdio+0x1e>
 8000988:	4620      	mov	r0, r4
 800098a:	f000 fb9d 	bl	80010c8 <_fflush_r>
 800098e:	68e1      	ldr	r1, [r4, #12]
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <cleanup_stdio+0x3c>)
 8000992:	4299      	cmp	r1, r3
 8000994:	d004      	beq.n	80009a0 <cleanup_stdio+0x30>
 8000996:	4620      	mov	r0, r4
 8000998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800099c:	f000 bb94 	b.w	80010c8 <_fflush_r>
 80009a0:	bd10      	pop	{r4, pc}
 80009a2:	bf00      	nop
 80009a4:	200000d4 	.word	0x200000d4
 80009a8:	2000013c 	.word	0x2000013c
 80009ac:	200001a4 	.word	0x200001a4

080009b0 <global_stdio_init.part.0>:
 80009b0:	b510      	push	{r4, lr}
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <global_stdio_init.part.0+0x30>)
 80009b4:	4c0b      	ldr	r4, [pc, #44]	; (80009e4 <global_stdio_init.part.0+0x34>)
 80009b6:	4a0c      	ldr	r2, [pc, #48]	; (80009e8 <global_stdio_init.part.0+0x38>)
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	4620      	mov	r0, r4
 80009bc:	2200      	movs	r2, #0
 80009be:	2104      	movs	r1, #4
 80009c0:	f7ff ffa6 	bl	8000910 <std>
 80009c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80009c8:	2201      	movs	r2, #1
 80009ca:	2109      	movs	r1, #9
 80009cc:	f7ff ffa0 	bl	8000910 <std>
 80009d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80009d4:	2202      	movs	r2, #2
 80009d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009da:	2112      	movs	r1, #18
 80009dc:	f7ff bf98 	b.w	8000910 <std>
 80009e0:	2000020c 	.word	0x2000020c
 80009e4:	200000d4 	.word	0x200000d4
 80009e8:	08000959 	.word	0x08000959

080009ec <__sfp_lock_acquire>:
 80009ec:	4801      	ldr	r0, [pc, #4]	; (80009f4 <__sfp_lock_acquire+0x8>)
 80009ee:	f000 b9eb 	b.w	8000dc8 <__retarget_lock_acquire_recursive>
 80009f2:	bf00      	nop
 80009f4:	20000215 	.word	0x20000215

080009f8 <__sfp_lock_release>:
 80009f8:	4801      	ldr	r0, [pc, #4]	; (8000a00 <__sfp_lock_release+0x8>)
 80009fa:	f000 b9e6 	b.w	8000dca <__retarget_lock_release_recursive>
 80009fe:	bf00      	nop
 8000a00:	20000215 	.word	0x20000215

08000a04 <__sinit>:
 8000a04:	b510      	push	{r4, lr}
 8000a06:	4604      	mov	r4, r0
 8000a08:	f7ff fff0 	bl	80009ec <__sfp_lock_acquire>
 8000a0c:	6a23      	ldr	r3, [r4, #32]
 8000a0e:	b11b      	cbz	r3, 8000a18 <__sinit+0x14>
 8000a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a14:	f7ff bff0 	b.w	80009f8 <__sfp_lock_release>
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <__sinit+0x28>)
 8000a1a:	6223      	str	r3, [r4, #32]
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <__sinit+0x2c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1f5      	bne.n	8000a10 <__sinit+0xc>
 8000a24:	f7ff ffc4 	bl	80009b0 <global_stdio_init.part.0>
 8000a28:	e7f2      	b.n	8000a10 <__sinit+0xc>
 8000a2a:	bf00      	nop
 8000a2c:	08000971 	.word	0x08000971
 8000a30:	2000020c 	.word	0x2000020c

08000a34 <_fwalk_sglue>:
 8000a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a38:	4607      	mov	r7, r0
 8000a3a:	4688      	mov	r8, r1
 8000a3c:	4614      	mov	r4, r2
 8000a3e:	2600      	movs	r6, #0
 8000a40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a44:	f1b9 0901 	subs.w	r9, r9, #1
 8000a48:	d505      	bpl.n	8000a56 <_fwalk_sglue+0x22>
 8000a4a:	6824      	ldr	r4, [r4, #0]
 8000a4c:	2c00      	cmp	r4, #0
 8000a4e:	d1f7      	bne.n	8000a40 <_fwalk_sglue+0xc>
 8000a50:	4630      	mov	r0, r6
 8000a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a56:	89ab      	ldrh	r3, [r5, #12]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d907      	bls.n	8000a6c <_fwalk_sglue+0x38>
 8000a5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000a60:	3301      	adds	r3, #1
 8000a62:	d003      	beq.n	8000a6c <_fwalk_sglue+0x38>
 8000a64:	4629      	mov	r1, r5
 8000a66:	4638      	mov	r0, r7
 8000a68:	47c0      	blx	r8
 8000a6a:	4306      	orrs	r6, r0
 8000a6c:	3568      	adds	r5, #104	; 0x68
 8000a6e:	e7e9      	b.n	8000a44 <_fwalk_sglue+0x10>

08000a70 <_puts_r>:
 8000a70:	6a03      	ldr	r3, [r0, #32]
 8000a72:	b570      	push	{r4, r5, r6, lr}
 8000a74:	6884      	ldr	r4, [r0, #8]
 8000a76:	4605      	mov	r5, r0
 8000a78:	460e      	mov	r6, r1
 8000a7a:	b90b      	cbnz	r3, 8000a80 <_puts_r+0x10>
 8000a7c:	f7ff ffc2 	bl	8000a04 <__sinit>
 8000a80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a82:	07db      	lsls	r3, r3, #31
 8000a84:	d405      	bmi.n	8000a92 <_puts_r+0x22>
 8000a86:	89a3      	ldrh	r3, [r4, #12]
 8000a88:	0598      	lsls	r0, r3, #22
 8000a8a:	d402      	bmi.n	8000a92 <_puts_r+0x22>
 8000a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a8e:	f000 f99b 	bl	8000dc8 <__retarget_lock_acquire_recursive>
 8000a92:	89a3      	ldrh	r3, [r4, #12]
 8000a94:	0719      	lsls	r1, r3, #28
 8000a96:	d513      	bpl.n	8000ac0 <_puts_r+0x50>
 8000a98:	6923      	ldr	r3, [r4, #16]
 8000a9a:	b18b      	cbz	r3, 8000ac0 <_puts_r+0x50>
 8000a9c:	3e01      	subs	r6, #1
 8000a9e:	68a3      	ldr	r3, [r4, #8]
 8000aa0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	60a3      	str	r3, [r4, #8]
 8000aa8:	b9e9      	cbnz	r1, 8000ae6 <_puts_r+0x76>
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	da2e      	bge.n	8000b0c <_puts_r+0x9c>
 8000aae:	4622      	mov	r2, r4
 8000ab0:	210a      	movs	r1, #10
 8000ab2:	4628      	mov	r0, r5
 8000ab4:	f000 f87b 	bl	8000bae <__swbuf_r>
 8000ab8:	3001      	adds	r0, #1
 8000aba:	d007      	beq.n	8000acc <_puts_r+0x5c>
 8000abc:	250a      	movs	r5, #10
 8000abe:	e007      	b.n	8000ad0 <_puts_r+0x60>
 8000ac0:	4621      	mov	r1, r4
 8000ac2:	4628      	mov	r0, r5
 8000ac4:	f000 f8b0 	bl	8000c28 <__swsetup_r>
 8000ac8:	2800      	cmp	r0, #0
 8000aca:	d0e7      	beq.n	8000a9c <_puts_r+0x2c>
 8000acc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000ad0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000ad2:	07da      	lsls	r2, r3, #31
 8000ad4:	d405      	bmi.n	8000ae2 <_puts_r+0x72>
 8000ad6:	89a3      	ldrh	r3, [r4, #12]
 8000ad8:	059b      	lsls	r3, r3, #22
 8000ada:	d402      	bmi.n	8000ae2 <_puts_r+0x72>
 8000adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ade:	f000 f974 	bl	8000dca <__retarget_lock_release_recursive>
 8000ae2:	4628      	mov	r0, r5
 8000ae4:	bd70      	pop	{r4, r5, r6, pc}
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	da04      	bge.n	8000af4 <_puts_r+0x84>
 8000aea:	69a2      	ldr	r2, [r4, #24]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	dc06      	bgt.n	8000afe <_puts_r+0x8e>
 8000af0:	290a      	cmp	r1, #10
 8000af2:	d004      	beq.n	8000afe <_puts_r+0x8e>
 8000af4:	6823      	ldr	r3, [r4, #0]
 8000af6:	1c5a      	adds	r2, r3, #1
 8000af8:	6022      	str	r2, [r4, #0]
 8000afa:	7019      	strb	r1, [r3, #0]
 8000afc:	e7cf      	b.n	8000a9e <_puts_r+0x2e>
 8000afe:	4622      	mov	r2, r4
 8000b00:	4628      	mov	r0, r5
 8000b02:	f000 f854 	bl	8000bae <__swbuf_r>
 8000b06:	3001      	adds	r0, #1
 8000b08:	d1c9      	bne.n	8000a9e <_puts_r+0x2e>
 8000b0a:	e7df      	b.n	8000acc <_puts_r+0x5c>
 8000b0c:	6823      	ldr	r3, [r4, #0]
 8000b0e:	250a      	movs	r5, #10
 8000b10:	1c5a      	adds	r2, r3, #1
 8000b12:	6022      	str	r2, [r4, #0]
 8000b14:	701d      	strb	r5, [r3, #0]
 8000b16:	e7db      	b.n	8000ad0 <_puts_r+0x60>

08000b18 <puts>:
 8000b18:	4b02      	ldr	r3, [pc, #8]	; (8000b24 <puts+0xc>)
 8000b1a:	4601      	mov	r1, r0
 8000b1c:	6818      	ldr	r0, [r3, #0]
 8000b1e:	f7ff bfa7 	b.w	8000a70 <_puts_r>
 8000b22:	bf00      	nop
 8000b24:	2000005c 	.word	0x2000005c

08000b28 <__sread>:
 8000b28:	b510      	push	{r4, lr}
 8000b2a:	460c      	mov	r4, r1
 8000b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b30:	f000 f8fc 	bl	8000d2c <_read_r>
 8000b34:	2800      	cmp	r0, #0
 8000b36:	bfab      	itete	ge
 8000b38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000b3a:	89a3      	ldrhlt	r3, [r4, #12]
 8000b3c:	181b      	addge	r3, r3, r0
 8000b3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000b42:	bfac      	ite	ge
 8000b44:	6563      	strge	r3, [r4, #84]	; 0x54
 8000b46:	81a3      	strhlt	r3, [r4, #12]
 8000b48:	bd10      	pop	{r4, pc}

08000b4a <__swrite>:
 8000b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b4e:	461f      	mov	r7, r3
 8000b50:	898b      	ldrh	r3, [r1, #12]
 8000b52:	05db      	lsls	r3, r3, #23
 8000b54:	4605      	mov	r5, r0
 8000b56:	460c      	mov	r4, r1
 8000b58:	4616      	mov	r6, r2
 8000b5a:	d505      	bpl.n	8000b68 <__swrite+0x1e>
 8000b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b60:	2302      	movs	r3, #2
 8000b62:	2200      	movs	r2, #0
 8000b64:	f000 f8d0 	bl	8000d08 <_lseek_r>
 8000b68:	89a3      	ldrh	r3, [r4, #12]
 8000b6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000b6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000b72:	81a3      	strh	r3, [r4, #12]
 8000b74:	4632      	mov	r2, r6
 8000b76:	463b      	mov	r3, r7
 8000b78:	4628      	mov	r0, r5
 8000b7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000b7e:	f000 b8e7 	b.w	8000d50 <_write_r>

08000b82 <__sseek>:
 8000b82:	b510      	push	{r4, lr}
 8000b84:	460c      	mov	r4, r1
 8000b86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b8a:	f000 f8bd 	bl	8000d08 <_lseek_r>
 8000b8e:	1c43      	adds	r3, r0, #1
 8000b90:	89a3      	ldrh	r3, [r4, #12]
 8000b92:	bf15      	itete	ne
 8000b94:	6560      	strne	r0, [r4, #84]	; 0x54
 8000b96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000b9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000b9e:	81a3      	strheq	r3, [r4, #12]
 8000ba0:	bf18      	it	ne
 8000ba2:	81a3      	strhne	r3, [r4, #12]
 8000ba4:	bd10      	pop	{r4, pc}

08000ba6 <__sclose>:
 8000ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000baa:	f000 b89d 	b.w	8000ce8 <_close_r>

08000bae <__swbuf_r>:
 8000bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bb0:	460e      	mov	r6, r1
 8000bb2:	4614      	mov	r4, r2
 8000bb4:	4605      	mov	r5, r0
 8000bb6:	b118      	cbz	r0, 8000bc0 <__swbuf_r+0x12>
 8000bb8:	6a03      	ldr	r3, [r0, #32]
 8000bba:	b90b      	cbnz	r3, 8000bc0 <__swbuf_r+0x12>
 8000bbc:	f7ff ff22 	bl	8000a04 <__sinit>
 8000bc0:	69a3      	ldr	r3, [r4, #24]
 8000bc2:	60a3      	str	r3, [r4, #8]
 8000bc4:	89a3      	ldrh	r3, [r4, #12]
 8000bc6:	071a      	lsls	r2, r3, #28
 8000bc8:	d525      	bpl.n	8000c16 <__swbuf_r+0x68>
 8000bca:	6923      	ldr	r3, [r4, #16]
 8000bcc:	b31b      	cbz	r3, 8000c16 <__swbuf_r+0x68>
 8000bce:	6823      	ldr	r3, [r4, #0]
 8000bd0:	6922      	ldr	r2, [r4, #16]
 8000bd2:	1a98      	subs	r0, r3, r2
 8000bd4:	6963      	ldr	r3, [r4, #20]
 8000bd6:	b2f6      	uxtb	r6, r6
 8000bd8:	4283      	cmp	r3, r0
 8000bda:	4637      	mov	r7, r6
 8000bdc:	dc04      	bgt.n	8000be8 <__swbuf_r+0x3a>
 8000bde:	4621      	mov	r1, r4
 8000be0:	4628      	mov	r0, r5
 8000be2:	f000 fa71 	bl	80010c8 <_fflush_r>
 8000be6:	b9e0      	cbnz	r0, 8000c22 <__swbuf_r+0x74>
 8000be8:	68a3      	ldr	r3, [r4, #8]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	60a3      	str	r3, [r4, #8]
 8000bee:	6823      	ldr	r3, [r4, #0]
 8000bf0:	1c5a      	adds	r2, r3, #1
 8000bf2:	6022      	str	r2, [r4, #0]
 8000bf4:	701e      	strb	r6, [r3, #0]
 8000bf6:	6962      	ldr	r2, [r4, #20]
 8000bf8:	1c43      	adds	r3, r0, #1
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d004      	beq.n	8000c08 <__swbuf_r+0x5a>
 8000bfe:	89a3      	ldrh	r3, [r4, #12]
 8000c00:	07db      	lsls	r3, r3, #31
 8000c02:	d506      	bpl.n	8000c12 <__swbuf_r+0x64>
 8000c04:	2e0a      	cmp	r6, #10
 8000c06:	d104      	bne.n	8000c12 <__swbuf_r+0x64>
 8000c08:	4621      	mov	r1, r4
 8000c0a:	4628      	mov	r0, r5
 8000c0c:	f000 fa5c 	bl	80010c8 <_fflush_r>
 8000c10:	b938      	cbnz	r0, 8000c22 <__swbuf_r+0x74>
 8000c12:	4638      	mov	r0, r7
 8000c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c16:	4621      	mov	r1, r4
 8000c18:	4628      	mov	r0, r5
 8000c1a:	f000 f805 	bl	8000c28 <__swsetup_r>
 8000c1e:	2800      	cmp	r0, #0
 8000c20:	d0d5      	beq.n	8000bce <__swbuf_r+0x20>
 8000c22:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000c26:	e7f4      	b.n	8000c12 <__swbuf_r+0x64>

08000c28 <__swsetup_r>:
 8000c28:	b538      	push	{r3, r4, r5, lr}
 8000c2a:	4b2a      	ldr	r3, [pc, #168]	; (8000cd4 <__swsetup_r+0xac>)
 8000c2c:	4605      	mov	r5, r0
 8000c2e:	6818      	ldr	r0, [r3, #0]
 8000c30:	460c      	mov	r4, r1
 8000c32:	b118      	cbz	r0, 8000c3c <__swsetup_r+0x14>
 8000c34:	6a03      	ldr	r3, [r0, #32]
 8000c36:	b90b      	cbnz	r3, 8000c3c <__swsetup_r+0x14>
 8000c38:	f7ff fee4 	bl	8000a04 <__sinit>
 8000c3c:	89a3      	ldrh	r3, [r4, #12]
 8000c3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000c42:	0718      	lsls	r0, r3, #28
 8000c44:	d422      	bmi.n	8000c8c <__swsetup_r+0x64>
 8000c46:	06d9      	lsls	r1, r3, #27
 8000c48:	d407      	bmi.n	8000c5a <__swsetup_r+0x32>
 8000c4a:	2309      	movs	r3, #9
 8000c4c:	602b      	str	r3, [r5, #0]
 8000c4e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000c52:	81a3      	strh	r3, [r4, #12]
 8000c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c58:	e034      	b.n	8000cc4 <__swsetup_r+0x9c>
 8000c5a:	0758      	lsls	r0, r3, #29
 8000c5c:	d512      	bpl.n	8000c84 <__swsetup_r+0x5c>
 8000c5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000c60:	b141      	cbz	r1, 8000c74 <__swsetup_r+0x4c>
 8000c62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000c66:	4299      	cmp	r1, r3
 8000c68:	d002      	beq.n	8000c70 <__swsetup_r+0x48>
 8000c6a:	4628      	mov	r0, r5
 8000c6c:	f000 f8ae 	bl	8000dcc <_free_r>
 8000c70:	2300      	movs	r3, #0
 8000c72:	6363      	str	r3, [r4, #52]	; 0x34
 8000c74:	89a3      	ldrh	r3, [r4, #12]
 8000c76:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000c7a:	81a3      	strh	r3, [r4, #12]
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	6063      	str	r3, [r4, #4]
 8000c80:	6923      	ldr	r3, [r4, #16]
 8000c82:	6023      	str	r3, [r4, #0]
 8000c84:	89a3      	ldrh	r3, [r4, #12]
 8000c86:	f043 0308 	orr.w	r3, r3, #8
 8000c8a:	81a3      	strh	r3, [r4, #12]
 8000c8c:	6923      	ldr	r3, [r4, #16]
 8000c8e:	b94b      	cbnz	r3, 8000ca4 <__swsetup_r+0x7c>
 8000c90:	89a3      	ldrh	r3, [r4, #12]
 8000c92:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000c96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c9a:	d003      	beq.n	8000ca4 <__swsetup_r+0x7c>
 8000c9c:	4621      	mov	r1, r4
 8000c9e:	4628      	mov	r0, r5
 8000ca0:	f000 fa60 	bl	8001164 <__smakebuf_r>
 8000ca4:	89a0      	ldrh	r0, [r4, #12]
 8000ca6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000caa:	f010 0301 	ands.w	r3, r0, #1
 8000cae:	d00a      	beq.n	8000cc6 <__swsetup_r+0x9e>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60a3      	str	r3, [r4, #8]
 8000cb4:	6963      	ldr	r3, [r4, #20]
 8000cb6:	425b      	negs	r3, r3
 8000cb8:	61a3      	str	r3, [r4, #24]
 8000cba:	6923      	ldr	r3, [r4, #16]
 8000cbc:	b943      	cbnz	r3, 8000cd0 <__swsetup_r+0xa8>
 8000cbe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000cc2:	d1c4      	bne.n	8000c4e <__swsetup_r+0x26>
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	0781      	lsls	r1, r0, #30
 8000cc8:	bf58      	it	pl
 8000cca:	6963      	ldrpl	r3, [r4, #20]
 8000ccc:	60a3      	str	r3, [r4, #8]
 8000cce:	e7f4      	b.n	8000cba <__swsetup_r+0x92>
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	e7f7      	b.n	8000cc4 <__swsetup_r+0x9c>
 8000cd4:	2000005c 	.word	0x2000005c

08000cd8 <memset>:
 8000cd8:	4402      	add	r2, r0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d100      	bne.n	8000ce2 <memset+0xa>
 8000ce0:	4770      	bx	lr
 8000ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8000ce6:	e7f9      	b.n	8000cdc <memset+0x4>

08000ce8 <_close_r>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	4d06      	ldr	r5, [pc, #24]	; (8000d04 <_close_r+0x1c>)
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4608      	mov	r0, r1
 8000cf2:	602b      	str	r3, [r5, #0]
 8000cf4:	f7ff fd77 	bl	80007e6 <_close>
 8000cf8:	1c43      	adds	r3, r0, #1
 8000cfa:	d102      	bne.n	8000d02 <_close_r+0x1a>
 8000cfc:	682b      	ldr	r3, [r5, #0]
 8000cfe:	b103      	cbz	r3, 8000d02 <_close_r+0x1a>
 8000d00:	6023      	str	r3, [r4, #0]
 8000d02:	bd38      	pop	{r3, r4, r5, pc}
 8000d04:	20000210 	.word	0x20000210

08000d08 <_lseek_r>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	4d07      	ldr	r5, [pc, #28]	; (8000d28 <_lseek_r+0x20>)
 8000d0c:	4604      	mov	r4, r0
 8000d0e:	4608      	mov	r0, r1
 8000d10:	4611      	mov	r1, r2
 8000d12:	2200      	movs	r2, #0
 8000d14:	602a      	str	r2, [r5, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	f7ff fd8c 	bl	8000834 <_lseek>
 8000d1c:	1c43      	adds	r3, r0, #1
 8000d1e:	d102      	bne.n	8000d26 <_lseek_r+0x1e>
 8000d20:	682b      	ldr	r3, [r5, #0]
 8000d22:	b103      	cbz	r3, 8000d26 <_lseek_r+0x1e>
 8000d24:	6023      	str	r3, [r4, #0]
 8000d26:	bd38      	pop	{r3, r4, r5, pc}
 8000d28:	20000210 	.word	0x20000210

08000d2c <_read_r>:
 8000d2c:	b538      	push	{r3, r4, r5, lr}
 8000d2e:	4d07      	ldr	r5, [pc, #28]	; (8000d4c <_read_r+0x20>)
 8000d30:	4604      	mov	r4, r0
 8000d32:	4608      	mov	r0, r1
 8000d34:	4611      	mov	r1, r2
 8000d36:	2200      	movs	r2, #0
 8000d38:	602a      	str	r2, [r5, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	f7ff fd1a 	bl	8000774 <_read>
 8000d40:	1c43      	adds	r3, r0, #1
 8000d42:	d102      	bne.n	8000d4a <_read_r+0x1e>
 8000d44:	682b      	ldr	r3, [r5, #0]
 8000d46:	b103      	cbz	r3, 8000d4a <_read_r+0x1e>
 8000d48:	6023      	str	r3, [r4, #0]
 8000d4a:	bd38      	pop	{r3, r4, r5, pc}
 8000d4c:	20000210 	.word	0x20000210

08000d50 <_write_r>:
 8000d50:	b538      	push	{r3, r4, r5, lr}
 8000d52:	4d07      	ldr	r5, [pc, #28]	; (8000d70 <_write_r+0x20>)
 8000d54:	4604      	mov	r4, r0
 8000d56:	4608      	mov	r0, r1
 8000d58:	4611      	mov	r1, r2
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	602a      	str	r2, [r5, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	f7ff fd25 	bl	80007ae <_write>
 8000d64:	1c43      	adds	r3, r0, #1
 8000d66:	d102      	bne.n	8000d6e <_write_r+0x1e>
 8000d68:	682b      	ldr	r3, [r5, #0]
 8000d6a:	b103      	cbz	r3, 8000d6e <_write_r+0x1e>
 8000d6c:	6023      	str	r3, [r4, #0]
 8000d6e:	bd38      	pop	{r3, r4, r5, pc}
 8000d70:	20000210 	.word	0x20000210

08000d74 <__errno>:
 8000d74:	4b01      	ldr	r3, [pc, #4]	; (8000d7c <__errno+0x8>)
 8000d76:	6818      	ldr	r0, [r3, #0]
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	2000005c 	.word	0x2000005c

08000d80 <__libc_init_array>:
 8000d80:	b570      	push	{r4, r5, r6, lr}
 8000d82:	4d0d      	ldr	r5, [pc, #52]	; (8000db8 <__libc_init_array+0x38>)
 8000d84:	4c0d      	ldr	r4, [pc, #52]	; (8000dbc <__libc_init_array+0x3c>)
 8000d86:	1b64      	subs	r4, r4, r5
 8000d88:	10a4      	asrs	r4, r4, #2
 8000d8a:	2600      	movs	r6, #0
 8000d8c:	42a6      	cmp	r6, r4
 8000d8e:	d109      	bne.n	8000da4 <__libc_init_array+0x24>
 8000d90:	4d0b      	ldr	r5, [pc, #44]	; (8000dc0 <__libc_init_array+0x40>)
 8000d92:	4c0c      	ldr	r4, [pc, #48]	; (8000dc4 <__libc_init_array+0x44>)
 8000d94:	f000 fa54 	bl	8001240 <_init>
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	10a4      	asrs	r4, r4, #2
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	42a6      	cmp	r6, r4
 8000da0:	d105      	bne.n	8000dae <__libc_init_array+0x2e>
 8000da2:	bd70      	pop	{r4, r5, r6, pc}
 8000da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000da8:	4798      	blx	r3
 8000daa:	3601      	adds	r6, #1
 8000dac:	e7ee      	b.n	8000d8c <__libc_init_array+0xc>
 8000dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8000db2:	4798      	blx	r3
 8000db4:	3601      	adds	r6, #1
 8000db6:	e7f2      	b.n	8000d9e <__libc_init_array+0x1e>
 8000db8:	080012a0 	.word	0x080012a0
 8000dbc:	080012a0 	.word	0x080012a0
 8000dc0:	080012a0 	.word	0x080012a0
 8000dc4:	080012a4 	.word	0x080012a4

08000dc8 <__retarget_lock_acquire_recursive>:
 8000dc8:	4770      	bx	lr

08000dca <__retarget_lock_release_recursive>:
 8000dca:	4770      	bx	lr

08000dcc <_free_r>:
 8000dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000dce:	2900      	cmp	r1, #0
 8000dd0:	d044      	beq.n	8000e5c <_free_r+0x90>
 8000dd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000dd6:	9001      	str	r0, [sp, #4]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f1a1 0404 	sub.w	r4, r1, #4
 8000dde:	bfb8      	it	lt
 8000de0:	18e4      	addlt	r4, r4, r3
 8000de2:	f000 f8df 	bl	8000fa4 <__malloc_lock>
 8000de6:	4a1e      	ldr	r2, [pc, #120]	; (8000e60 <_free_r+0x94>)
 8000de8:	9801      	ldr	r0, [sp, #4]
 8000dea:	6813      	ldr	r3, [r2, #0]
 8000dec:	b933      	cbnz	r3, 8000dfc <_free_r+0x30>
 8000dee:	6063      	str	r3, [r4, #4]
 8000df0:	6014      	str	r4, [r2, #0]
 8000df2:	b003      	add	sp, #12
 8000df4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000df8:	f000 b8da 	b.w	8000fb0 <__malloc_unlock>
 8000dfc:	42a3      	cmp	r3, r4
 8000dfe:	d908      	bls.n	8000e12 <_free_r+0x46>
 8000e00:	6825      	ldr	r5, [r4, #0]
 8000e02:	1961      	adds	r1, r4, r5
 8000e04:	428b      	cmp	r3, r1
 8000e06:	bf01      	itttt	eq
 8000e08:	6819      	ldreq	r1, [r3, #0]
 8000e0a:	685b      	ldreq	r3, [r3, #4]
 8000e0c:	1949      	addeq	r1, r1, r5
 8000e0e:	6021      	streq	r1, [r4, #0]
 8000e10:	e7ed      	b.n	8000dee <_free_r+0x22>
 8000e12:	461a      	mov	r2, r3
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	b10b      	cbz	r3, 8000e1c <_free_r+0x50>
 8000e18:	42a3      	cmp	r3, r4
 8000e1a:	d9fa      	bls.n	8000e12 <_free_r+0x46>
 8000e1c:	6811      	ldr	r1, [r2, #0]
 8000e1e:	1855      	adds	r5, r2, r1
 8000e20:	42a5      	cmp	r5, r4
 8000e22:	d10b      	bne.n	8000e3c <_free_r+0x70>
 8000e24:	6824      	ldr	r4, [r4, #0]
 8000e26:	4421      	add	r1, r4
 8000e28:	1854      	adds	r4, r2, r1
 8000e2a:	42a3      	cmp	r3, r4
 8000e2c:	6011      	str	r1, [r2, #0]
 8000e2e:	d1e0      	bne.n	8000df2 <_free_r+0x26>
 8000e30:	681c      	ldr	r4, [r3, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	6053      	str	r3, [r2, #4]
 8000e36:	440c      	add	r4, r1
 8000e38:	6014      	str	r4, [r2, #0]
 8000e3a:	e7da      	b.n	8000df2 <_free_r+0x26>
 8000e3c:	d902      	bls.n	8000e44 <_free_r+0x78>
 8000e3e:	230c      	movs	r3, #12
 8000e40:	6003      	str	r3, [r0, #0]
 8000e42:	e7d6      	b.n	8000df2 <_free_r+0x26>
 8000e44:	6825      	ldr	r5, [r4, #0]
 8000e46:	1961      	adds	r1, r4, r5
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	bf04      	itt	eq
 8000e4c:	6819      	ldreq	r1, [r3, #0]
 8000e4e:	685b      	ldreq	r3, [r3, #4]
 8000e50:	6063      	str	r3, [r4, #4]
 8000e52:	bf04      	itt	eq
 8000e54:	1949      	addeq	r1, r1, r5
 8000e56:	6021      	streq	r1, [r4, #0]
 8000e58:	6054      	str	r4, [r2, #4]
 8000e5a:	e7ca      	b.n	8000df2 <_free_r+0x26>
 8000e5c:	b003      	add	sp, #12
 8000e5e:	bd30      	pop	{r4, r5, pc}
 8000e60:	20000218 	.word	0x20000218

08000e64 <sbrk_aligned>:
 8000e64:	b570      	push	{r4, r5, r6, lr}
 8000e66:	4e0e      	ldr	r6, [pc, #56]	; (8000ea0 <sbrk_aligned+0x3c>)
 8000e68:	460c      	mov	r4, r1
 8000e6a:	6831      	ldr	r1, [r6, #0]
 8000e6c:	4605      	mov	r5, r0
 8000e6e:	b911      	cbnz	r1, 8000e76 <sbrk_aligned+0x12>
 8000e70:	f000 f9d6 	bl	8001220 <_sbrk_r>
 8000e74:	6030      	str	r0, [r6, #0]
 8000e76:	4621      	mov	r1, r4
 8000e78:	4628      	mov	r0, r5
 8000e7a:	f000 f9d1 	bl	8001220 <_sbrk_r>
 8000e7e:	1c43      	adds	r3, r0, #1
 8000e80:	d00a      	beq.n	8000e98 <sbrk_aligned+0x34>
 8000e82:	1cc4      	adds	r4, r0, #3
 8000e84:	f024 0403 	bic.w	r4, r4, #3
 8000e88:	42a0      	cmp	r0, r4
 8000e8a:	d007      	beq.n	8000e9c <sbrk_aligned+0x38>
 8000e8c:	1a21      	subs	r1, r4, r0
 8000e8e:	4628      	mov	r0, r5
 8000e90:	f000 f9c6 	bl	8001220 <_sbrk_r>
 8000e94:	3001      	adds	r0, #1
 8000e96:	d101      	bne.n	8000e9c <sbrk_aligned+0x38>
 8000e98:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ea0:	2000021c 	.word	0x2000021c

08000ea4 <_malloc_r>:
 8000ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ea8:	1ccd      	adds	r5, r1, #3
 8000eaa:	f025 0503 	bic.w	r5, r5, #3
 8000eae:	3508      	adds	r5, #8
 8000eb0:	2d0c      	cmp	r5, #12
 8000eb2:	bf38      	it	cc
 8000eb4:	250c      	movcc	r5, #12
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	4607      	mov	r7, r0
 8000eba:	db01      	blt.n	8000ec0 <_malloc_r+0x1c>
 8000ebc:	42a9      	cmp	r1, r5
 8000ebe:	d905      	bls.n	8000ecc <_malloc_r+0x28>
 8000ec0:	230c      	movs	r3, #12
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	2600      	movs	r6, #0
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ecc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000fa0 <_malloc_r+0xfc>
 8000ed0:	f000 f868 	bl	8000fa4 <__malloc_lock>
 8000ed4:	f8d8 3000 	ldr.w	r3, [r8]
 8000ed8:	461c      	mov	r4, r3
 8000eda:	bb5c      	cbnz	r4, 8000f34 <_malloc_r+0x90>
 8000edc:	4629      	mov	r1, r5
 8000ede:	4638      	mov	r0, r7
 8000ee0:	f7ff ffc0 	bl	8000e64 <sbrk_aligned>
 8000ee4:	1c43      	adds	r3, r0, #1
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	d155      	bne.n	8000f96 <_malloc_r+0xf2>
 8000eea:	f8d8 4000 	ldr.w	r4, [r8]
 8000eee:	4626      	mov	r6, r4
 8000ef0:	2e00      	cmp	r6, #0
 8000ef2:	d145      	bne.n	8000f80 <_malloc_r+0xdc>
 8000ef4:	2c00      	cmp	r4, #0
 8000ef6:	d048      	beq.n	8000f8a <_malloc_r+0xe6>
 8000ef8:	6823      	ldr	r3, [r4, #0]
 8000efa:	4631      	mov	r1, r6
 8000efc:	4638      	mov	r0, r7
 8000efe:	eb04 0903 	add.w	r9, r4, r3
 8000f02:	f000 f98d 	bl	8001220 <_sbrk_r>
 8000f06:	4581      	cmp	r9, r0
 8000f08:	d13f      	bne.n	8000f8a <_malloc_r+0xe6>
 8000f0a:	6821      	ldr	r1, [r4, #0]
 8000f0c:	1a6d      	subs	r5, r5, r1
 8000f0e:	4629      	mov	r1, r5
 8000f10:	4638      	mov	r0, r7
 8000f12:	f7ff ffa7 	bl	8000e64 <sbrk_aligned>
 8000f16:	3001      	adds	r0, #1
 8000f18:	d037      	beq.n	8000f8a <_malloc_r+0xe6>
 8000f1a:	6823      	ldr	r3, [r4, #0]
 8000f1c:	442b      	add	r3, r5
 8000f1e:	6023      	str	r3, [r4, #0]
 8000f20:	f8d8 3000 	ldr.w	r3, [r8]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d038      	beq.n	8000f9a <_malloc_r+0xf6>
 8000f28:	685a      	ldr	r2, [r3, #4]
 8000f2a:	42a2      	cmp	r2, r4
 8000f2c:	d12b      	bne.n	8000f86 <_malloc_r+0xe2>
 8000f2e:	2200      	movs	r2, #0
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	e00f      	b.n	8000f54 <_malloc_r+0xb0>
 8000f34:	6822      	ldr	r2, [r4, #0]
 8000f36:	1b52      	subs	r2, r2, r5
 8000f38:	d41f      	bmi.n	8000f7a <_malloc_r+0xd6>
 8000f3a:	2a0b      	cmp	r2, #11
 8000f3c:	d917      	bls.n	8000f6e <_malloc_r+0xca>
 8000f3e:	1961      	adds	r1, r4, r5
 8000f40:	42a3      	cmp	r3, r4
 8000f42:	6025      	str	r5, [r4, #0]
 8000f44:	bf18      	it	ne
 8000f46:	6059      	strne	r1, [r3, #4]
 8000f48:	6863      	ldr	r3, [r4, #4]
 8000f4a:	bf08      	it	eq
 8000f4c:	f8c8 1000 	streq.w	r1, [r8]
 8000f50:	5162      	str	r2, [r4, r5]
 8000f52:	604b      	str	r3, [r1, #4]
 8000f54:	4638      	mov	r0, r7
 8000f56:	f104 060b 	add.w	r6, r4, #11
 8000f5a:	f000 f829 	bl	8000fb0 <__malloc_unlock>
 8000f5e:	f026 0607 	bic.w	r6, r6, #7
 8000f62:	1d23      	adds	r3, r4, #4
 8000f64:	1af2      	subs	r2, r6, r3
 8000f66:	d0ae      	beq.n	8000ec6 <_malloc_r+0x22>
 8000f68:	1b9b      	subs	r3, r3, r6
 8000f6a:	50a3      	str	r3, [r4, r2]
 8000f6c:	e7ab      	b.n	8000ec6 <_malloc_r+0x22>
 8000f6e:	42a3      	cmp	r3, r4
 8000f70:	6862      	ldr	r2, [r4, #4]
 8000f72:	d1dd      	bne.n	8000f30 <_malloc_r+0x8c>
 8000f74:	f8c8 2000 	str.w	r2, [r8]
 8000f78:	e7ec      	b.n	8000f54 <_malloc_r+0xb0>
 8000f7a:	4623      	mov	r3, r4
 8000f7c:	6864      	ldr	r4, [r4, #4]
 8000f7e:	e7ac      	b.n	8000eda <_malloc_r+0x36>
 8000f80:	4634      	mov	r4, r6
 8000f82:	6876      	ldr	r6, [r6, #4]
 8000f84:	e7b4      	b.n	8000ef0 <_malloc_r+0x4c>
 8000f86:	4613      	mov	r3, r2
 8000f88:	e7cc      	b.n	8000f24 <_malloc_r+0x80>
 8000f8a:	230c      	movs	r3, #12
 8000f8c:	603b      	str	r3, [r7, #0]
 8000f8e:	4638      	mov	r0, r7
 8000f90:	f000 f80e 	bl	8000fb0 <__malloc_unlock>
 8000f94:	e797      	b.n	8000ec6 <_malloc_r+0x22>
 8000f96:	6025      	str	r5, [r4, #0]
 8000f98:	e7dc      	b.n	8000f54 <_malloc_r+0xb0>
 8000f9a:	605b      	str	r3, [r3, #4]
 8000f9c:	deff      	udf	#255	; 0xff
 8000f9e:	bf00      	nop
 8000fa0:	20000218 	.word	0x20000218

08000fa4 <__malloc_lock>:
 8000fa4:	4801      	ldr	r0, [pc, #4]	; (8000fac <__malloc_lock+0x8>)
 8000fa6:	f7ff bf0f 	b.w	8000dc8 <__retarget_lock_acquire_recursive>
 8000faa:	bf00      	nop
 8000fac:	20000214 	.word	0x20000214

08000fb0 <__malloc_unlock>:
 8000fb0:	4801      	ldr	r0, [pc, #4]	; (8000fb8 <__malloc_unlock+0x8>)
 8000fb2:	f7ff bf0a 	b.w	8000dca <__retarget_lock_release_recursive>
 8000fb6:	bf00      	nop
 8000fb8:	20000214 	.word	0x20000214

08000fbc <__sflush_r>:
 8000fbc:	898a      	ldrh	r2, [r1, #12]
 8000fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fc2:	4605      	mov	r5, r0
 8000fc4:	0710      	lsls	r0, r2, #28
 8000fc6:	460c      	mov	r4, r1
 8000fc8:	d458      	bmi.n	800107c <__sflush_r+0xc0>
 8000fca:	684b      	ldr	r3, [r1, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	dc05      	bgt.n	8000fdc <__sflush_r+0x20>
 8000fd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	dc02      	bgt.n	8000fdc <__sflush_r+0x20>
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000fde:	2e00      	cmp	r6, #0
 8000fe0:	d0f9      	beq.n	8000fd6 <__sflush_r+0x1a>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000fe8:	682f      	ldr	r7, [r5, #0]
 8000fea:	6a21      	ldr	r1, [r4, #32]
 8000fec:	602b      	str	r3, [r5, #0]
 8000fee:	d032      	beq.n	8001056 <__sflush_r+0x9a>
 8000ff0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000ff2:	89a3      	ldrh	r3, [r4, #12]
 8000ff4:	075a      	lsls	r2, r3, #29
 8000ff6:	d505      	bpl.n	8001004 <__sflush_r+0x48>
 8000ff8:	6863      	ldr	r3, [r4, #4]
 8000ffa:	1ac0      	subs	r0, r0, r3
 8000ffc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ffe:	b10b      	cbz	r3, 8001004 <__sflush_r+0x48>
 8001000:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001002:	1ac0      	subs	r0, r0, r3
 8001004:	2300      	movs	r3, #0
 8001006:	4602      	mov	r2, r0
 8001008:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800100a:	6a21      	ldr	r1, [r4, #32]
 800100c:	4628      	mov	r0, r5
 800100e:	47b0      	blx	r6
 8001010:	1c43      	adds	r3, r0, #1
 8001012:	89a3      	ldrh	r3, [r4, #12]
 8001014:	d106      	bne.n	8001024 <__sflush_r+0x68>
 8001016:	6829      	ldr	r1, [r5, #0]
 8001018:	291d      	cmp	r1, #29
 800101a:	d82b      	bhi.n	8001074 <__sflush_r+0xb8>
 800101c:	4a29      	ldr	r2, [pc, #164]	; (80010c4 <__sflush_r+0x108>)
 800101e:	410a      	asrs	r2, r1
 8001020:	07d6      	lsls	r6, r2, #31
 8001022:	d427      	bmi.n	8001074 <__sflush_r+0xb8>
 8001024:	2200      	movs	r2, #0
 8001026:	6062      	str	r2, [r4, #4]
 8001028:	04d9      	lsls	r1, r3, #19
 800102a:	6922      	ldr	r2, [r4, #16]
 800102c:	6022      	str	r2, [r4, #0]
 800102e:	d504      	bpl.n	800103a <__sflush_r+0x7e>
 8001030:	1c42      	adds	r2, r0, #1
 8001032:	d101      	bne.n	8001038 <__sflush_r+0x7c>
 8001034:	682b      	ldr	r3, [r5, #0]
 8001036:	b903      	cbnz	r3, 800103a <__sflush_r+0x7e>
 8001038:	6560      	str	r0, [r4, #84]	; 0x54
 800103a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800103c:	602f      	str	r7, [r5, #0]
 800103e:	2900      	cmp	r1, #0
 8001040:	d0c9      	beq.n	8000fd6 <__sflush_r+0x1a>
 8001042:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001046:	4299      	cmp	r1, r3
 8001048:	d002      	beq.n	8001050 <__sflush_r+0x94>
 800104a:	4628      	mov	r0, r5
 800104c:	f7ff febe 	bl	8000dcc <_free_r>
 8001050:	2000      	movs	r0, #0
 8001052:	6360      	str	r0, [r4, #52]	; 0x34
 8001054:	e7c0      	b.n	8000fd8 <__sflush_r+0x1c>
 8001056:	2301      	movs	r3, #1
 8001058:	4628      	mov	r0, r5
 800105a:	47b0      	blx	r6
 800105c:	1c41      	adds	r1, r0, #1
 800105e:	d1c8      	bne.n	8000ff2 <__sflush_r+0x36>
 8001060:	682b      	ldr	r3, [r5, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0c5      	beq.n	8000ff2 <__sflush_r+0x36>
 8001066:	2b1d      	cmp	r3, #29
 8001068:	d001      	beq.n	800106e <__sflush_r+0xb2>
 800106a:	2b16      	cmp	r3, #22
 800106c:	d101      	bne.n	8001072 <__sflush_r+0xb6>
 800106e:	602f      	str	r7, [r5, #0]
 8001070:	e7b1      	b.n	8000fd6 <__sflush_r+0x1a>
 8001072:	89a3      	ldrh	r3, [r4, #12]
 8001074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001078:	81a3      	strh	r3, [r4, #12]
 800107a:	e7ad      	b.n	8000fd8 <__sflush_r+0x1c>
 800107c:	690f      	ldr	r7, [r1, #16]
 800107e:	2f00      	cmp	r7, #0
 8001080:	d0a9      	beq.n	8000fd6 <__sflush_r+0x1a>
 8001082:	0793      	lsls	r3, r2, #30
 8001084:	680e      	ldr	r6, [r1, #0]
 8001086:	bf08      	it	eq
 8001088:	694b      	ldreq	r3, [r1, #20]
 800108a:	600f      	str	r7, [r1, #0]
 800108c:	bf18      	it	ne
 800108e:	2300      	movne	r3, #0
 8001090:	eba6 0807 	sub.w	r8, r6, r7
 8001094:	608b      	str	r3, [r1, #8]
 8001096:	f1b8 0f00 	cmp.w	r8, #0
 800109a:	dd9c      	ble.n	8000fd6 <__sflush_r+0x1a>
 800109c:	6a21      	ldr	r1, [r4, #32]
 800109e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80010a0:	4643      	mov	r3, r8
 80010a2:	463a      	mov	r2, r7
 80010a4:	4628      	mov	r0, r5
 80010a6:	47b0      	blx	r6
 80010a8:	2800      	cmp	r0, #0
 80010aa:	dc06      	bgt.n	80010ba <__sflush_r+0xfe>
 80010ac:	89a3      	ldrh	r3, [r4, #12]
 80010ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b2:	81a3      	strh	r3, [r4, #12]
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010b8:	e78e      	b.n	8000fd8 <__sflush_r+0x1c>
 80010ba:	4407      	add	r7, r0
 80010bc:	eba8 0800 	sub.w	r8, r8, r0
 80010c0:	e7e9      	b.n	8001096 <__sflush_r+0xda>
 80010c2:	bf00      	nop
 80010c4:	dfbffffe 	.word	0xdfbffffe

080010c8 <_fflush_r>:
 80010c8:	b538      	push	{r3, r4, r5, lr}
 80010ca:	690b      	ldr	r3, [r1, #16]
 80010cc:	4605      	mov	r5, r0
 80010ce:	460c      	mov	r4, r1
 80010d0:	b913      	cbnz	r3, 80010d8 <_fflush_r+0x10>
 80010d2:	2500      	movs	r5, #0
 80010d4:	4628      	mov	r0, r5
 80010d6:	bd38      	pop	{r3, r4, r5, pc}
 80010d8:	b118      	cbz	r0, 80010e2 <_fflush_r+0x1a>
 80010da:	6a03      	ldr	r3, [r0, #32]
 80010dc:	b90b      	cbnz	r3, 80010e2 <_fflush_r+0x1a>
 80010de:	f7ff fc91 	bl	8000a04 <__sinit>
 80010e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0f3      	beq.n	80010d2 <_fflush_r+0xa>
 80010ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80010ec:	07d0      	lsls	r0, r2, #31
 80010ee:	d404      	bmi.n	80010fa <_fflush_r+0x32>
 80010f0:	0599      	lsls	r1, r3, #22
 80010f2:	d402      	bmi.n	80010fa <_fflush_r+0x32>
 80010f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80010f6:	f7ff fe67 	bl	8000dc8 <__retarget_lock_acquire_recursive>
 80010fa:	4628      	mov	r0, r5
 80010fc:	4621      	mov	r1, r4
 80010fe:	f7ff ff5d 	bl	8000fbc <__sflush_r>
 8001102:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001104:	07da      	lsls	r2, r3, #31
 8001106:	4605      	mov	r5, r0
 8001108:	d4e4      	bmi.n	80010d4 <_fflush_r+0xc>
 800110a:	89a3      	ldrh	r3, [r4, #12]
 800110c:	059b      	lsls	r3, r3, #22
 800110e:	d4e1      	bmi.n	80010d4 <_fflush_r+0xc>
 8001110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001112:	f7ff fe5a 	bl	8000dca <__retarget_lock_release_recursive>
 8001116:	e7dd      	b.n	80010d4 <_fflush_r+0xc>

08001118 <__swhatbuf_r>:
 8001118:	b570      	push	{r4, r5, r6, lr}
 800111a:	460c      	mov	r4, r1
 800111c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001120:	2900      	cmp	r1, #0
 8001122:	b096      	sub	sp, #88	; 0x58
 8001124:	4615      	mov	r5, r2
 8001126:	461e      	mov	r6, r3
 8001128:	da0d      	bge.n	8001146 <__swhatbuf_r+0x2e>
 800112a:	89a3      	ldrh	r3, [r4, #12]
 800112c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001130:	f04f 0100 	mov.w	r1, #0
 8001134:	bf0c      	ite	eq
 8001136:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800113a:	2340      	movne	r3, #64	; 0x40
 800113c:	2000      	movs	r0, #0
 800113e:	6031      	str	r1, [r6, #0]
 8001140:	602b      	str	r3, [r5, #0]
 8001142:	b016      	add	sp, #88	; 0x58
 8001144:	bd70      	pop	{r4, r5, r6, pc}
 8001146:	466a      	mov	r2, sp
 8001148:	f000 f848 	bl	80011dc <_fstat_r>
 800114c:	2800      	cmp	r0, #0
 800114e:	dbec      	blt.n	800112a <__swhatbuf_r+0x12>
 8001150:	9901      	ldr	r1, [sp, #4]
 8001152:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001156:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800115a:	4259      	negs	r1, r3
 800115c:	4159      	adcs	r1, r3
 800115e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001162:	e7eb      	b.n	800113c <__swhatbuf_r+0x24>

08001164 <__smakebuf_r>:
 8001164:	898b      	ldrh	r3, [r1, #12]
 8001166:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001168:	079d      	lsls	r5, r3, #30
 800116a:	4606      	mov	r6, r0
 800116c:	460c      	mov	r4, r1
 800116e:	d507      	bpl.n	8001180 <__smakebuf_r+0x1c>
 8001170:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001174:	6023      	str	r3, [r4, #0]
 8001176:	6123      	str	r3, [r4, #16]
 8001178:	2301      	movs	r3, #1
 800117a:	6163      	str	r3, [r4, #20]
 800117c:	b002      	add	sp, #8
 800117e:	bd70      	pop	{r4, r5, r6, pc}
 8001180:	ab01      	add	r3, sp, #4
 8001182:	466a      	mov	r2, sp
 8001184:	f7ff ffc8 	bl	8001118 <__swhatbuf_r>
 8001188:	9900      	ldr	r1, [sp, #0]
 800118a:	4605      	mov	r5, r0
 800118c:	4630      	mov	r0, r6
 800118e:	f7ff fe89 	bl	8000ea4 <_malloc_r>
 8001192:	b948      	cbnz	r0, 80011a8 <__smakebuf_r+0x44>
 8001194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001198:	059a      	lsls	r2, r3, #22
 800119a:	d4ef      	bmi.n	800117c <__smakebuf_r+0x18>
 800119c:	f023 0303 	bic.w	r3, r3, #3
 80011a0:	f043 0302 	orr.w	r3, r3, #2
 80011a4:	81a3      	strh	r3, [r4, #12]
 80011a6:	e7e3      	b.n	8001170 <__smakebuf_r+0xc>
 80011a8:	89a3      	ldrh	r3, [r4, #12]
 80011aa:	6020      	str	r0, [r4, #0]
 80011ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b0:	81a3      	strh	r3, [r4, #12]
 80011b2:	9b00      	ldr	r3, [sp, #0]
 80011b4:	6163      	str	r3, [r4, #20]
 80011b6:	9b01      	ldr	r3, [sp, #4]
 80011b8:	6120      	str	r0, [r4, #16]
 80011ba:	b15b      	cbz	r3, 80011d4 <__smakebuf_r+0x70>
 80011bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80011c0:	4630      	mov	r0, r6
 80011c2:	f000 f81d 	bl	8001200 <_isatty_r>
 80011c6:	b128      	cbz	r0, 80011d4 <__smakebuf_r+0x70>
 80011c8:	89a3      	ldrh	r3, [r4, #12]
 80011ca:	f023 0303 	bic.w	r3, r3, #3
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	81a3      	strh	r3, [r4, #12]
 80011d4:	89a3      	ldrh	r3, [r4, #12]
 80011d6:	431d      	orrs	r5, r3
 80011d8:	81a5      	strh	r5, [r4, #12]
 80011da:	e7cf      	b.n	800117c <__smakebuf_r+0x18>

080011dc <_fstat_r>:
 80011dc:	b538      	push	{r3, r4, r5, lr}
 80011de:	4d07      	ldr	r5, [pc, #28]	; (80011fc <_fstat_r+0x20>)
 80011e0:	2300      	movs	r3, #0
 80011e2:	4604      	mov	r4, r0
 80011e4:	4608      	mov	r0, r1
 80011e6:	4611      	mov	r1, r2
 80011e8:	602b      	str	r3, [r5, #0]
 80011ea:	f7ff fb08 	bl	80007fe <_fstat>
 80011ee:	1c43      	adds	r3, r0, #1
 80011f0:	d102      	bne.n	80011f8 <_fstat_r+0x1c>
 80011f2:	682b      	ldr	r3, [r5, #0]
 80011f4:	b103      	cbz	r3, 80011f8 <_fstat_r+0x1c>
 80011f6:	6023      	str	r3, [r4, #0]
 80011f8:	bd38      	pop	{r3, r4, r5, pc}
 80011fa:	bf00      	nop
 80011fc:	20000210 	.word	0x20000210

08001200 <_isatty_r>:
 8001200:	b538      	push	{r3, r4, r5, lr}
 8001202:	4d06      	ldr	r5, [pc, #24]	; (800121c <_isatty_r+0x1c>)
 8001204:	2300      	movs	r3, #0
 8001206:	4604      	mov	r4, r0
 8001208:	4608      	mov	r0, r1
 800120a:	602b      	str	r3, [r5, #0]
 800120c:	f7ff fb07 	bl	800081e <_isatty>
 8001210:	1c43      	adds	r3, r0, #1
 8001212:	d102      	bne.n	800121a <_isatty_r+0x1a>
 8001214:	682b      	ldr	r3, [r5, #0]
 8001216:	b103      	cbz	r3, 800121a <_isatty_r+0x1a>
 8001218:	6023      	str	r3, [r4, #0]
 800121a:	bd38      	pop	{r3, r4, r5, pc}
 800121c:	20000210 	.word	0x20000210

08001220 <_sbrk_r>:
 8001220:	b538      	push	{r3, r4, r5, lr}
 8001222:	4d06      	ldr	r5, [pc, #24]	; (800123c <_sbrk_r+0x1c>)
 8001224:	2300      	movs	r3, #0
 8001226:	4604      	mov	r4, r0
 8001228:	4608      	mov	r0, r1
 800122a:	602b      	str	r3, [r5, #0]
 800122c:	f7ff fb10 	bl	8000850 <_sbrk>
 8001230:	1c43      	adds	r3, r0, #1
 8001232:	d102      	bne.n	800123a <_sbrk_r+0x1a>
 8001234:	682b      	ldr	r3, [r5, #0]
 8001236:	b103      	cbz	r3, 800123a <_sbrk_r+0x1a>
 8001238:	6023      	str	r3, [r4, #0]
 800123a:	bd38      	pop	{r3, r4, r5, pc}
 800123c:	20000210 	.word	0x20000210

08001240 <_init>:
 8001240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001242:	bf00      	nop
 8001244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001246:	bc08      	pop	{r3}
 8001248:	469e      	mov	lr, r3
 800124a:	4770      	bx	lr

0800124c <_fini>:
 800124c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800124e:	bf00      	nop
 8001250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001252:	bc08      	pop	{r3}
 8001254:	469e      	mov	lr, r3
 8001256:	4770      	bx	lr
